@startuml
' ===== ORM Package =====
package Models {
  class MaterialGraphORM {
    + id: int
    + name: String
  }

  class Process {
    + id: int
    + duration: int
  }
    interface ItemCounter{
  }

  class ProcessIn implements ItemCounter {
    + quantity: int
  }

  class ProcessOut implements ItemCounter {
  }

  class Item {
    + id: int
  }
  class Bought extends Item{
  }

  class Workstation {
    + id: int
  }

  class ExpectedSales {
    - period: int
  }

  class ExpectedSalesItem implements ItemCounter {
    - quantity: int
  }

  class Inventory{
    - period: int
  }

  class InventoryItem implements ItemCounter{
    - quantity: int
  }



  ' ORM Associations
  MaterialGraphORM "0..1" o-- "n" Process
  MaterialGraphORM "0..1" o--- "n" MaterialGraphORM: "subgraph"
  Process "1" o-- "n" ProcessIn
  Process "1" o-- "1" ProcessOut
  ProcessIn o-- Item
  ProcessOut o-- Item
  ProcessORM "n" o-- "1" Workstation
  Inventory "1" o-- "n" InventoryItem
  InventoryItem o-- Item

  ExpectedSales "1" o-- "n" ExpectedSalesItem
  ExpectedSalesItem o-- Item
}



package Material {

    class MaterialGraph {
        + id: int
        + name: String
        + processes: List<Process>
        + subgraphs: List<MaterialGraph>
    }


    class CalculateResourceRequirements {
        - graph: Material.MaterialGraph
        + calculate_needed_resources(): List<ItemCounter>
    }

    class CalculateReorderPoints {
        - graph: Material.MaterialGraph
        + calculate_reorder_points(): List<ItemCounter>
    }

}
package Conversion {
  class ProcessConverter {
  }

  class GraphConverter {
  }

  ' Dependencies
  GraphConverter ..> ProcessConverter
  GraphConverter ..> Material.MaterialGraph
  GraphConverter ..> Models.MaterialGraphORM
  ProcessConverter ..> Process
}




package "Visualization" {
    class VisualizationConverter {
      + convert(graph): MaterialGraph
    }
  interface MermaidContent {
    + get_mermaid_code() : String
  }

  class ClassDef implements MermaidContent {
    + fill: String
    + stroke: String
  }

  class MermaidStyle implements MermaidContent {
    + get_mermaid_code() : String
  }

  class MermaidBuilder implements MermaidContent {
    + addNode()
    + addRounded()
    + addArrow()
  }

  class VisualizeMermaid implements MermaidContent {
    - graph: MaterialGraph
    + get_mermaid_code() : String
  }

  ' Visualization Dependencies
  VisualizationConverter --> Material.MaterialGraph
  VisualizeMermaid --> MermaidBuilder
  VisualizeMermaid --> MaterialGraph
  VisualizeMermaid ..> Process
}

Material.MaterialGraph ... Models.MaterialGraphORM

@enduml
