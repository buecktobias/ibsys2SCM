@startuml

top to bottom direction
' ===== ORM Package =====

package Models {
  class MaterialGraphORM {
    + id: int
    + name: String
  }

  class Resource{
    + id: int
  }

  class Process extends Resource {
    + duration: int
  }
  class Item extends Resource {
    + id: int
  }
  class Produced extends Item{
  }
  class Bought extends Item{
  }

  class Workstation {
    + id: int
  }

  class ExpectedSales {
    - period: int
  }

  class Inventory{
    - period: int
  }


  ' ORM Associations
  MaterialGraphORM "0..1" o-- "n" Process
  MaterialGraphORM "0..1" o--- "n" MaterialGraphORM: "subgraph"
  Process "n" o-- "m" Item
  Process "n" o-- "1" Workstation
  Inventory "1" o-- "n" Item

  ExpectedSales "1" o-- "n" Item
}

package optimization {
    class PlanPrimaryProd{
        + plan_primary_prod(): Dict<Produced: Int>
    }
}

package calc{
    class CalcResReq {
        - graph: NxDiGraph
        + calc_res_req(): Dict<Resource, int>
    }
}


package Material {

    class MaterialGraph {
        + id: int
        + name: String
        + processes: List<Process>
        + subgraphs: List<MaterialGraph>
    }

    class NxNode{
        + id: int
    }

    class NxEdge{
        + from_node
        + to_node
        + weight: int
    }

    class NxDiGraph{
    }

    class BuildNxDiGraph{
        + build_di_graph(m_graph): NxDiGraph
    }




    class CalculateReorderPoints {
        - graph: Material.MaterialGraph
        + calculate_reorder_points(): List<ItemCounter>
    }

    NxDiGraph *-- NxEdge
    NxDiGraph *-- NxNode


}




package "Visualization" {
    class VisualizationConverter {
      + convert(graph): MaterialGraph
    }
  interface MermaidContent {
    + get_mermaid_code() : String
  }

  class ClassDef implements MermaidContent {
    + fill: String
    + stroke: String
  }

  class MermaidStyle implements MermaidContent {
    + get_mermaid_code() : String
  }

  class MermaidBuilder implements MermaidContent {
    + addNode()
    + addRounded()
    + addArrow()
  }

  class VisualizeMermaid implements MermaidContent {
    - graph: MaterialGraph
    + get_mermaid_code() : String
  }

  ' Visualization Dependencies
  VisualizationConverter --> Material.MaterialGraph
  VisualizeMermaid --> MermaidBuilder
  VisualizeMermaid --> MaterialGraph
}
CalcResReq ..> NxDiGraph
PlanPrimaryProd ..> Inventory
PlanPrimaryProd ..> ExpectedSales
MaterialGraph ... MaterialGraphORM

@enduml
