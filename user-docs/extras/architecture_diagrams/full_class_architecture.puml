@startuml
skinparam Padding 1
skinparam NodePadding 1
skinparam HorizontalSpacing 1
skinparam VerticalSpacing 1
skinparam nodesep 20
skinparam ranksep 50
skinparam linetype polyline

' ===== ORM Package =====


package repositories{
    class OrderRORepo{
        + read_orders()
    }

    class GraphRORepo{
        + get_root_graph()
    }

    class InvRORepo{
        + get_inv()
    }

    class WSRORepo{
        + get_ws()
    }
}


package models {
    class Order{
        + quantity: int
        + price : int
    }

     package result{
        class MaterialOrder{
            + period_ordered: int
            + is_supplied: bool
        }

        class Production{
            - produced_item
            - quantity
        }

        class WSCapa{
            + shifts: int
            + overtime: int
        }

     }



     package input{
          class WSUseInfo{
             + workstation_id: int
             + setup_events: int
             + idletime: int
             + time_needed: int
          }

          enum OrderState{
            SEND
            APPROVED
            REJECTED
          }



          class SellOrder{
              + period_offered: int
              + period_sold: int
          }

          class NormalOrder extends SellOrder{
          }
          class FutureOrder extends SellOrder {
          }

          class DirectOrder extends SellOrder{
             + penalty_cost: int
             + period_created: int
             + amount_sold: int
             + order_state: OrderState
          }



          class Inventory{
            - period: int
            - item_quantities: dict<Produced, int>
          }

          DirectOrder o-- OrderState
      }


    class MaterialGraphORM {
        + id: int
        + name: String
    }

    class Resource{
        + id: int
    }

    class Process extends Resource {
        + duration: int
    }

    class Item extends Resource {
        + id: int
    }

    class Produced extends Item{
    }
    class Bought extends Item{
    }

    class Workstation {
        + id: int
    }

    ' ORM Associations



    MaterialGraphORM "0..1" o-- "n" Process
    MaterialGraphORM "0..1" o--- "n" MaterialGraphORM: "subgraph"
    Process "n" o-- "m" Item
    Process "n" o-- "1" Workstation
    Inventory "1" o-- "n" Item
    Order "1" o-- "n" Item
    WSUseInfo o-- Workstation
    WSCapa o-- Workstation
    Production o-- Produced
}


package optimization {
    class PlanPrimaryProd{
        + plan_prim_prod(): Counter<Produced>
    }
}

package calc{
    class CalcResReq {
        - graph: NxDiGraph
        + calc_res_req(): Dict<Resource, int>
    }

    class CalculateReorderPoints {
        - graph: MaterialGraph
    }
}


package domain {
    class ExpectedSales {
        - period: int
        - item_quantities: dict<Produced, int>
    }
    class MaterialGraph {
        + id: int
        + name: String
        + processes: List<Process>
        + subgraphs: List<MaterialGraph>
    }

    together{
    class NxNode{
        + id: int
    }

        class NxEdge{
            + from_node
            + to_node
            + weight: int
        }

        class NxDiGraph{
        }

        class BuildNxDiGraph{
            + build_di_graph(m_graph): NxDiGraph
        }
        NxDiGraph *-- NxEdge
        NxDiGraph *-- NxNode
    }

}




package visualization {
    class GraphVisualizer{
        + visualize()
    }

    class VisualizationConverter {
        + convert(graph): MaterialGraph
    }

    package mermaid{
    }

    ' Visualization Dependencies
    VisualizationConverter ..> MaterialGraph
    GraphVisualizer o--> VisualizationConverter
    GraphVisualizer ..> MaterialGraph

    GraphVisualizer ..> mermaid: "use"
}
repositories -[hidden]- models

GraphRORepo o-> MaterialGraphORM
OrderRORepo o-> Order

WSRORepo o-> WSUseInfo
InvRORepo o-> Inventory

CalcResReq ..> NxDiGraph
PlanPrimaryProd ..> ExpectedSales
SellOrder -up-|> Order
MaterialOrder -up-|> Order
BuildNxDiGraph ..> NxDiGraph
BuildNxDiGraph ..> MaterialGraph
MaterialGraph .. GraphRORepo
@enduml